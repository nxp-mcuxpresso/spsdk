# Copyright 2025 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
# ============================  TLV Configuration template for mimx9352, Revision: latest.  ============================

# ======================================================================================================================
#                                                 == General Options ==
# ======================================================================================================================
# -------------------------------------===== The chip family name [Required] =====--------------------------------------
# Description: NXP chip family identifier.
family: mimx9352
# -----------------------------------------===== MCU revision [Optional] =====------------------------------------------
# Description: Revision of silicon. The 'latest' name, means most current revision.
# Possible options: <a0, a1, latest>
revision: latest
# ----------------------------------------===== Key import TLV [Optional] =====-----------------------------------------
# Description: This TLV is designed to import a symmetric key or a private key of an asymmetric key pair. The imported
# key must be encrypted (except specific cases like SRKH). The key used to decrypt the imported key must have the
# following attributes; -  DECRYPT usage; -  A wrapping key algorithm as permitted algorithm (detailed in next
# sections). User must import symmetric key or private key from an asymmetric key pair. For RSA asymmetric private keys,
# it must be the concatenation of private exponent followed by the modulus. To be valid, all key attributes of the
# imported key must be coherent. If attributes are invalid, an error is returned.
command:
  KEY_IMPORT:
    # ----------------------------------===== Key ID [Conditionally required] =====-----------------------------------
    # Description: Key store ID where to store the imported key. It must be the key store ID related to the key
    # management handle set in the command API
    key_id: 0
    # ---------------------------===== Key import algorithm [Conditionally required] =====----------------------------
    # Description:
    #  KEY       VALUE
    #  MD5       0x0200000
    #  SHA1      0x02000005
    #  SHA224    0x02000008
    #  SHA256    0x02000009
    #  SHA384    0x0200000A
    #  SHA512    0x0200000B
    #  defaults to SHA256
    # Possible options: <MD5, SHA1, SHA224, SHA256, SHA384, SHA512>
    permitted_algorithm: "ALL CIPHER"
    # -----------------------------===== Derived key usage [Conditionally required] =====-----------------------------
    # Description: Permission usage list. List of possible permissions:
    #  Cache           0x00000004  Permission to cache the key in the ELE internal secure memory. This usage is set by
    # default by ELE FW for all keys generated or imported.
    #  Encrypt         0x00000100  Permission to encrypt a message with the key. It could be cipher encryption, AEAD
    # encryption or asymmetric encryption operation.
    #  Decrypt         0x00000200  Permission to decrypt a message with the key. It could be cipher decryption, AEAD
    # decryption or asymmetric decryption operation.
    #  Sign message    0x00000400  Permission to sign a message with the key. It could be a MAC generation or an
    # asymmetric message signature operation.
    #  Verify message  0x00000800  Permission to verify a message signature with the key. It could be a MAC
    # verification or an asymmetric message signature verification operation.
    #  Sign hash       0x00001000  Permission to sign a hashed message with the key with an asymmetric signature
    # operation. Setting this permission automatically sets the Sign Message usage.
    #  Verify hash     0x00002000  Permission to verify a hashed message signature with the key with an asymmetric
    # signature verification operation.
    #  Setting this permission automatically sets the Verify Message usage.
    #  Derive          0x00004000  Permission to derive other keys from this key.
    key_usage:
      - Encrypt
      - Decrypt
    # ------------------------------===== Import key type [Conditionally required] =====------------------------------
    # Description:
    #  Key type          Value   Key size in bits
    #  AES        0x2400  128/192/256
    #  HMAC SHA384       0x1100  224/256/384/512
    #  Derived key       0x1200  256/384
    #  OEM_IMPORT_MK_SK  0x9200  128/192/256
    #  ECC NIST          0x7112  128/192/256
    # Possible options: <AES, HMAC SHA384, Derived key, OEM_IMPORT_MK_SK, ECC NIST>
    key_type: AES
    # ---------------------------===== Import key size bits [Conditionally required] =====----------------------------
    # Description: Import key size bits
    # Possible options: <128, 192, 224, 256, 384, 512>
    key_size_bits: 256
    # ---------------------------===== Imported key lifetime [Conditionally required] =====---------------------------
    # Description:
    #  ELE_KEY_IMPORT_VOLATILE           0xC0020000  Standard volatile key.
    #  ELE_KEY_IMPORT_PERSISTENT         0xC0020001  Standard persistent key.
    #  ELE_KEY_IMPORT_PERMANENT          0xC00200FF  Standard permanent key.
    # Possible options: <ELE_KEY_IMPORT_VOLATILE, ELE_KEY_IMPORT_PERSISTENT, ELE_KEY_IMPORT_PERMANENT>
    key_lifetime: ELE_KEY_IMPORT_PERSISTENT
    # --------------------------===== Imported key lifecycle [Conditionally required] =====---------------------------
    # Description:
    #  CURRENT           0x00  Key is usable in current lifecycle.
    #  OPEN              0x01  Key is usable in open lifecycle.
    #  CLOSED            0x02  Key is usable in closed lifecycle.
    #  CLOSED and LOCKED 0x04  Key is usable in closed and locked lifecycle.
    # Possible options: <CURRENT, OPEN, CLOSED, LOCKED>
    key_lifecycle: OPEN_CLOSED
    # --------------------------===== OEM_IMPORT_MK_SK key ID [Conditionally required] =====--------------------------
    # Description: Key store ID where is stored the OEM_IMPORT_MK_SK key. It must be the key store ID related to the
    # key management handle set in the command API
    oem_mk_sk_key_id: 1
    # ----------------------===== Imported key wrapping algorithm [Conditionally required] =====----------------------
    # Description:
    #  RFC3394 - RFC 3394 wrapping
    #  AES_CBC - AES-CBC wrapping (padding: ISO7816-4 padding)
    # Possible options: <RFC3394, AES_CBC>
    key_wrapping_algorithm: RFC3394
    # -------------------------------------===== Initial vector [Optional] =====--------------------------------------
    # Description: IV to use for CBC wrapping. Not used if 'wrapping algorithm' not equal 0x02.
    # iv: "0x00000000000000000000000000000000"
    # ------------------------------===== Wrapped key signing algorithm [Optional] =====------------------------------
    # Description: Algorithm used to sign the blob itself. Field “Signature” of this blob. It must be: 0x01 (CMAC)
    # Possible options: <CMAC>
    signing_algorithm: CMAC
    # --------------------------------===== Wrapped key [Conditionally required] =====--------------------------------
    # # Description: Private key data in encrypted format as defined by the 'Wrapping Algorithm'. Key used to do the
    # # encryption must be OEM_IMPORT_WRAP_SK derived from OEM_IMPORT_MK_SK. Instead of 'wrapped_key' & 'signature' it
    # # could be used 'import_key' & 'oem_import_mk_sk_key'.
    # wrapped_key: "0x00000000"
    # # ---------------------------------===== Signature [Conditionally required] =====---------------------------------
    # # Description: Signature of all previous fields of this blob including the signature tag (0x5E) and signature
    # # length fields. Key used to do the signature must be OEM_IMPORT_CMAC_SK derived from OEM_IMPORT_MK_SK. Instead of
    # # 'wrapped_key' & 'signature' it could be used 'import_key' & 'oem_import_mk_sk_key'.
    # signature: "0x00000000000000000000000000000000"
    # ------------------------------===== Raw import key [Conditionally required] =====-------------------------------
    # Description: Raw private key that will be wrapped and encrypted by OEM_IMPORT_MK_SK key that must be also
    # provided. Instead of 'import_key' & 'oem_import_mk_sk_key' it could be used 'wrapped_key' & 'signature'.
    import_key: aes256.bin
    # ---------------------------===== OEM_IMPORT_MK_SK Key [Conditionally required] =====----------------------------
    # Description: OEM_IMPORT_MK_SK key used to wrap and encrypt the raw key. Instead of 'import_key' &
    # 'oem_import_mk_sk_key' it could be used 'wrapped_key' & 'signature'.
    oem_import_mk_sk_key: workspace/assets/oem_import_mk_sk.bin
    # -----------------------------------===== Super Root Key Hash [Optional] =====-----------------------------------
    # Description: Optional Super root key hash is used if Salt flags that requires in Exchange keys algorithms.
    srkh: "0x00000000000000000000000000000000"
output: tlv.bin
