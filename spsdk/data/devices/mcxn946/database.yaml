# Copyright 2023-2025 NXP
#
# SPDX-License-Identifier: BSD-3-Clause

revisions:
  a0:
    features:
      dat:
        socc: 6
      pfr:
        cfpa:
          reg_spec: pfr_cfpa_a0.json
        cmpa:
          reg_spec: pfr_cmpa_a0.json
      tz:
        reg_spec: tz_a0.json
  a1:
    features:
      pfr:
        cfpa:
          reg_spec: pfr_cfpa_a1.json
        cmpa:
          reg_spec: pfr_cmpa_a1.json
      tz:
        reg_spec: tz_a1.json
      dice:
        reg_spec: dice_had_a1.json
latest: a1

# General MCU information
info:
  use_in_doc: True
  purpose: MCX Series
  spsdk_predecessor_name: mcxn9xx
  # Web page of MCU representative
  web: https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/mcx-arm-cortex-m/mcx-n-series/mcx-n94x-and-n54x-mcus-with-dual-core-arm-cortex-m33-edgelock-secure-subsystem-and-neural-processing-unit:MCX-N94X-N54X
  memory_map: # Memory map basic info
    internal-flash_ns:
      start_int: "0x0"
      size_int: "0x100000"
      external: false
    flexspi_ns:
      start_int: "0x80000000"
      size_int: "0x8000000"
      external: true
    flexspi_s:
      start_int: "0x90000000"
      size_int: "0x8000000"
      external: true
      mirror_of: flexspi_ns
    internal-flash_s:
      start_int: "0x10000000"
      size_int: "0x100000"
      external: false
      mirror_of: internal-flash_ns
    sram:
      start_int: "0x20000000"
      size_int: "0x40000"
      external: false
      non_xip_type: int_ram
    sramx:
      start_int: "0x4000000"
      size_int: "0x18000"
      external: false
      __comment: Does not work as target `onchip RAM` memory
    ifr-bank1_ns:
      start_int: "0x1008000"
      size_int: "0x8000"
      external: false
    ifr-bank1_s:
      start_int: "0x11008000"
      size_int: "0x8000"
      external: false
  isp:
    rom:
      protocol: mboot
      interfaces: ["usb", "uart", "spi", "i2c", "can"]
      usb:
        vid: 0x1FC9
        pid: 0x014F

features:
  # ======== Fuses description section ========
  fuses: {}

  # ======== Communication buffer section ========
  comm_buffer:
    address: 0x20007000
    size: 0x1000

  # ======== Certificate block section ========
  cert_block:
    sub_features: [based_on_cert21]
    rot_type: "cert_block_21"

  # ======== DAT section ========
  dat:
    socc: 7 # SOCC identification
    dmbox_ap_ix: 2 # Typical Index of debug mailbox access port is 2

  # ======== MBI section ========
  mbi:
    mbi_classes:
      plain_xip:
        image_type: PLAIN_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinIvtZeroTotalLength
          - Mbi_MixinTrustZoneMandatory
          - Mbi_MixinLoadAddress
          - Mbi_MixinImageVersion
          - Mbi_ExportMixinAppTrustZone
      plain_ram:
        image_type: PLAIN_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinIvt
          - Mbi_MixinTrustZoneMandatory
          - Mbi_MixinLoadAddress
          - Mbi_MixinImageVersion
          - Mbi_ExportMixinAppTrustZone
      crc_ram:
        image_type: CRC_RAM_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinIvt
          - Mbi_MixinTrustZoneMandatory
          - Mbi_MixinLoadAddress
          - Mbi_MixinImageVersion
          - Mbi_ExportMixinAppTrustZone
          - Mbi_ExportMixinCrcSign
      crc_xip:
        image_type: CRC_XIP_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinIvt
          - Mbi_MixinLoadAddress
          - Mbi_MixinTrustZoneMandatory
          - Mbi_MixinImageVersion
          - Mbi_ExportMixinAppTrustZone
          - Mbi_ExportMixinCrcSign
      signed_xip:
        image_type: SIGNED_XIP_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinIvt
          - Mbi_MixinLoadAddress
          - Mbi_MixinCertBlockV21
          - Mbi_MixinManifestCrc
          - Mbi_MixinImageSubType
          - Mbi_MixinImageVersion
          - Mbi_MixinFwVersion
          - Mbi_ExportMixinAppCertBlockManifest
          - Mbi_ExportMixinEccSign
    images:
      xip:
        plain: plain_xip
        crc: crc_xip
        signed: signed_xip
      load_to_ram:
        plain: plain_ram
        crc: crc_ram

  # ======== PFR section ========
  pfr:
    cfpa: # CFPA description
      address: 0x100_0000
      size: 512
      seal_start: field1EC # CFPA_CRC32
      seal_count: 1
      grouped_registers:
        - uid: cfpa_dice_cert
          name: DICE_Certificate
          width: 1152
          config_as_hexstring: true
          description:
            DICE Certificate field is compounded by 36 32-bit fields and contains
            value of DICE Certificate generated by ROM
          sub_regs:
            - field100
            - field104
            - field108
            - field10C
            - field110
            - field114
            - field118
            - field11C
            - field120
            - field124
            - field128
            - field12C
            - field130
            - field134
            - field138
            - field13C
            - field140
            - field144
            - field148
            - field14C
            - field150
            - field154
            - field158
            - field15C
            - field160
            - field164
            - field168
            - field16C
            - field170
            - field174
            - field178
            - field17C
            - Reserved00180
            - Reserved00184
            - Reserved00188
            - Reserved0018C
      computed_fields:
        field000: # HEADER
          field000-bits8-15: pfr_reg_inverse_lower_8_bits # INV_CFPA_LC_STATE
        field020: # DBG_REVOKE_VU
          field020-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE
        field024: # DCFG_CC_SOCU_NS_PIN
          field024-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE
        field028: # DCFG_CC_SOCU_NS_DFLT
          field028-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE
    cmpa: # CMPA description
      address: 0x0100_4000
      size: 512
      seal_start: field1F0 # CMPA_CMAC0
      seal_count: 4
      grouped_registers:
        - uid: cmpa_rotkh
          name: ROTKH
          width: 384
          reversed: true
          config_as_hexstring: true
          alternative_widths: [256]
          description:
            ROTKH field is compounded by 12 32-bit fields and contains Root key table hash.
            Root of Trust Key Hash is SHA256 or SHA384 of RoTK public. Hash algorithm is selected
            based on RoTK EC type (secp256r1 -> SHA256 or secp384r1 -> SHA384).
            Same RoTKs and RoTKTH values are shared between debug authentication, SB3.1 firmware updates
            container and signed boot image based on CMPA.RoTKx_Usage.
          sub_regs:
            - field060
            - field064
            - field068
            - field06C
            - field070
            - field074
            - field078
            - field07C
            - field080
            - field084
            - field088
            - field08C
        - uid: cmpa_keyblob
          name: CUST_MK_SK_KEY_BLOB
          width: 384
          reversed: false
          config_as_hexstring: true
          description: CUST_MK_SK key blob.
            CUST_MK_SK is stored in form of RFC3394 blob and it is used by bootloader to decrypt SB3.1 encryption key during processing of SB file by bootloader.
            CUST_MK_SK is generated during device provisioning process by HSM_KEY_GEN (random key) or by HSM_STORE_KEY (user defined key) commands.
            To store this key into CMPA, SB_STORE_KEY command should be used.
          sub_regs:
            - field160
            - field164
            - field168
            - field16C
            - field170
            - field174
            - field178
            - field17C
            - field180
            - field184
            - field188
            - field18C
      computed_fields:
        field040: # DCFG_CC_SOCU_PIN
          field040-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE
        field044: # DCFG_CC_SOCU_DFLT
          field044-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE
      reg_spec_modification:
        field0B0:
          bitfields:
            field0B0-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0B4:
          bitfields:
            field0B4-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0B8:
          bitfields:
            field0B8-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0BC:
          bitfields:
            field0BC-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0C0:
          bitfields:
            field0C0-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0C4:
          bitfields:
            field0C4-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0C8:
          bitfields:
            field0C8-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0CC:
          bitfields:
            field0CC-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0D0:
          bitfields:
            field0D0-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0D4:
          bitfields:
            field0D4-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0D8:
          bitfields:
            field0D8-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0DC:
          bitfields:
            field0DC-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0E0:
          bitfields:
            field0E0-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0E4:
          bitfields:
            field0E4-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0E8:
          bitfields:
            field0E8-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.
        field0EC:
          bitfields:
            field0EC-bits8-31:
              config_processor: SHIFT_RIGHT:COUNT=8;DESC=ROM only uses upper 24bits to address
                IPED region. In config file use full 32b address.

  # ======== FCB section ========
  fcb:
    mem_types:
      flexspi_nor:
        reg_spec: fcb_flexspi_nor.json
        reg_spec_modification: ../../common/fcb_flexspi_nor_modification.yaml

  # ======== Bootable image section ========
  bootable_image:
    mem_types:
      flexspi_nor:
        image_pattern: ones
        segments:
          fcb: 0x0400
          image_version_ap: 0x0600
          mbi: 0x1000
      recovery_spi_sb31:
        segments:
          sb31: 0x00
      recovery_spi_mbi:
        segments:
          mbi: 0x00
      internal:
        segments:
          mbi: 0x00

  # ======== Secure binary v3.1 section ========
  sb31:
    supported_commands:
      - erase
      - load
      - execute
      - programFuses
      - programIFR
      - loadCMAC
      - copy
      - loadHashLocking
      - loadKeyBlob
      - configureMemory
      - fillMemory
      - checkFwVersion
    key_wraps_version: 2

  # ======== Device Hardware Security Module (HSM) section ========
  devhsm:
    sub_features: [DevHsmSB31]
    key_blob_offset: 0x0
    key_blob_command_position: -1
    supported_commands:
      - erase
      - load
      - execute
      - programFuses
      - programIFR
      - loadCMAC
      - copy
      - loadHashLocking
      - loadKeyBlob
      - configureMemory
      - fillMemory
      - checkFwVersion
    recommended_flow:
      - programLifeCycleFuse:
          address: 1
          value: 0x03000003
      - loadCMPA:
          address: 0x0100_4000
      - loadCFPA:
          address: 0x100_0000
      - loadKeyBlob:
          offset: 0x0

  # ======== TrustZone section ========
  tz: {}

  # ======== DICE configuration ========
  dice:
    buffer_address: 0x2002_0050
    csr_address: 0x0100_0100
    csr_length: 208
    response_length: 324
    need_reset: true

  # ======== EL2GO TP section ========
  el2go_tp:
    el2go_name: MCXN
    prov_method: fw_user_config
    use_additional_data: true
    fw_read_address: 0x2000_0000
    user_data_address: 0x2000_0100
    ignored_otp_ranges: [11, 22]
    clean_method: erase_cmpa
    validation_method: max_count=16;max_total_size=16384

  # ======== Memory configuration ========
  memcfg:
    peripherals:
      flexspi_nor:
        instances: [0]
      spi_nor:
        instances: [0]
