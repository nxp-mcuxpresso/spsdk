# Copyright 2025 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
revisions:
  a0: {}

latest: a0

# General MCU information
info:
  use_in_doc: True
  purpose: MCX Series
  # Web page of MCU representative
  web: https://www.nxp.com
  memory_map: # Memory map basic info
    internal-flash_ns:
      start_int: "0x0"
      size_int: "0x100000"
      external: false
    sram:
      start_int: "0x20000000"
      size_int: "0x40000"
      external: false
      non_xip_type: int_ram
  isp:
    rom:
      protocol: mboot
      interfaces: ["usb", "uart", "spi", "i2c", "can"]
      usb:
        vid: 0x1FC9
        pid: 0x014F


features:
  # ======== Blhost section ========
  blhost: {}

  # ======== Communication buffer section ========
  comm_buffer:
    address: 0x2002_8000
    size: 0x1000

  # ======== Certificate block section ========
  cert_block:
    sub_features: [based_on_srk]
    rot_type: "srk_table_ahab_v2_48_bytes"

  ahab: &ahab_common_config
    sub_features: [certificate_supported]
    container_types: [2] # Supported container types
    containers_max_cnt: 1
    image_types_mapping: {}
    certificate_type: 32bit_fuse_version # The certificate with full 32-bit fuse version support
    allow_empty_hash: False # Some chips allow empty image hash in OEM Open LC
    core_ids:
      CORTEX_M33: [1, "cortex-m33", "Cortex M33 - Boot core"]

    valid_offset_minimal_alignment: 4
    container_image_size_alignment: 1
    extra_containers: []
    image_hash_types: [sha384] # Supported image hash types
    iae_has_signed_offsets: True # There is a special cases when the Container is after images

  # ======== DAT section ========
  dat:
    socc: 0x4D430007 # SOCC identification
    auth_beacon_length: 2 # The length in bytes of authentication beacon
    based_on_ele: True # Flag if the implementation of DAT is based on EdgeLock Enclave
    dat_is_using_sha256_always: True # Flag to indicate SHA256 is always used for DAT
    used_beacons_on_ele: True # The DAT ELE implementation is using certificate and authentication beacons
    vu_instead_fuse_version: True # The DAT ELE implementation is using Vendor usage name instead of Fuse Version
    ele_cnt_version: 2 # DAT container is based on New AHAB container version 2
    sub_features: ["ele_pqc", "ssf_cert"]
    dac_rot_type: ecc_pqc_sha521_truncated # The Dac packet is using truncated SHA512 hash and in case of 2 signatures
    test_address: 0x2002_8000
    dmbox_ap_ix: 2
    command_delays: # Additional standard command delays per individual DM commands [seconds]
      ERASE_FLASH: 0.5
      DBG_AUTH_START: 1.0
    # Memory addresses for SSF certificate data
    ssf_cert:
      ecdsa_puk_address: 0x3002_2000 # Address for ECDSA PUK
      ecdsa_puk_size: 0x60 # Size for ECDSA PUK (96 bytes)
      hybrid_puk_address: 0x3002_2100 # Address for Hybrid PUK
      hybrid_puk_size: 0xA80 # Size for Hybrid PUK (2688 bytes)
    ahab: *ahab_common_config

  # ======== MBI section ========
  mbi:
    mbi_classes:
      plain_xip:
        image_type: PLAIN_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinIvt
          - Mbi_MixinTrustZoneV2
          - Mbi_MixinLoadAddress
          - Mbi_MixinImageVersion
          - Mbi_ExportMixinAppTrustZoneV2
      plain_ram:
        image_type: PLAIN_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinIvt
          - Mbi_MixinTrustZoneV2
          - Mbi_MixinLoadAddress
          - Mbi_MixinImageVersion
          - Mbi_ExportMixinAppTrustZoneV2
      crc_ram:
        image_type: CRC_RAM_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinIvt
          - Mbi_MixinTrustZoneV2
          - Mbi_MixinLoadAddress
          - Mbi_MixinImageVersion
          - Mbi_ExportMixinAppTrustZoneV2
          - Mbi_ExportMixinCrcSignEnd
      crc_xip:
        image_type: CRC_XIP_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinIvt
          - Mbi_MixinLoadAddress
          - Mbi_MixinTrustZoneV2
          - Mbi_MixinImageVersion
          - Mbi_ExportMixinAppTrustZoneV2
          - Mbi_ExportMixinCrcSignEnd
      signed_xip:
        image_type: SIGNED_XIP_IMAGE
        mixins:
          - Mbi_MixinApp
          - Mbi_MixinTrustZoneV2
          - Mbi_MixinIvt
          - Mbi_MixinLoadAddress
          - Mbi_MixinImageVersion
          - Mbi_MixinAppCrc
          - Mbi_MixinAhab
          - Mbi_ExportMixinAppTzCrcAhab
    images:
      xip:
        plain: plain_xip
        crc: crc_xip
        signed: signed_xip
      load_to_ram:
        plain: plain_ram
        crc: crc_ram
    ahab:
      <<: *ahab_common_config
      oem_images_max_cnt: 3
      image_types:
        application:
          CRC_CHECK: [0x01, crc_check, CRC fast data check]
          EXECUTABLE: [0x03, executable, Executable Image]
          TZ_DATA: [0x05, tz_data, Trust Zone Preset data]

  # ======== Secure binary v4.0 section ========
  sb40:
    supported_commands:
      - erase
      - load
      - execute
      - programFuses
      - programIFR
      - loadCMAC
      - copy
      - loadHashLocking
      - loadKeyBlob
      - configureMemory
      - fillMemory
      - checkFwVersion
      - reset

    variable_block_length: true
    commands_block_length: 4096
    supports_compression: true

    ahab:
      <<: *ahab_common_config
      oem_images_max_cnt: 1
      image_types:
        application:
          SB40_DESCRIPTOR: [0x0f, secure_binary_4, Secure binary 4.0]

  # ======== Bootable image section ========
  bootable_image:
    mem_types:
      internal:
        segments:
          mbi: 0x00

  # ======== TrustZone section ========
  tz:
    version: v2 # TrustZone configuration version v2.0

  # ======== DICE configuration ========
  dice:
    buffer_address: 0x2000_2000
    buffer_size: 0x1000
    rkth_length: 64

  # ======== Device Hardware Security Module (HSM) section ========
  devhsm:
    sub_features: [DevHsmSB4]
    key_blob_offset: 0
    key_blob_command_position: -1
    key_wraps_version: 2
    devbuff_wrapped_cust_mk_sk_key_size: 0x30
    supported_commands:
      - erase
      - load
      - execute
      - programFuses
      - programIFR
      - loadCMAC
      - copy
      - loadHashLocking
      - loadKeyBlob
      - configureMemory
      - fillMemory
      - checkFwVersion
      - reset

 # ======== PFR section ========
  pfr:
    sub_features: [ifr, cmpa, cfpa]
    ifr:
      address: 0x10000000
      reg_spec: ifr0.json
      reg_spec_modification:
        field100: # CFPA IMG_CMAC_CACHE
          reverse: True
          config_as_hexstring: True
        field110: # CFPA NBU_IMG_CMAC_CACHE
          reverse: True
          config_as_hexstring: True
        field260: # CMPA ROTKH
          reverse: True
          config_as_hexstring: True
        field290: # CMPA CUST_MK_SK_KEY_BLOB
          reverse: True
          config_as_hexstring: True
        field2c0: # CMPA PQC_ROTKH
          reverse: True
          config_as_hexstring: True
    cmpa:
      address: 0x100_4000
      reg_spec: pfr_cmpa.json
      reg_spec_modification:
        field260: # CMPA ROTKH
          reverse: True
          config_as_hexstring: True
        field290: # CMPA CUST_MK_SK_KEY_BLOB
          reverse: True
          config_as_hexstring: True
        field2c0: # CMPA PQC_ROTKH
          reverse: True
          config_as_hexstring: True
      grouped_registers:
        - uid: cmpa_rotkh
          name: ROTKH
          width: 384
          reversed: true
          config_as_hexstring: true
          alternative_widths: [256]
          description:
            ROTKH field is compounded by 12 32-bit fields and contains Root key table hash.
            Root of Trust Key Hash is SHA256 or SHA384 of RoTK public. Hash algorithm is selected
            based on RoTK EC type (secp256r1 -> SHA256 or secp384r1 -> SHA384).
            Same RoTKs and RoTKTH values are shared between debug authentication, SB3.1 firmware updates
            container and signed boot image based on CMPA.RoTKx_Usage.
          sub_regs:
            - field060
            - field064
            - field068
            - field06C
            - field070
            - field074
            - field078
            - field07C
            - field080
            - field084
            - field088
            - field08C
        - uid: cmpa_keyblob
          name: CUST_MK_SK_KEY_BLOB
          width: 384
          reversed: false
          config_as_hexstring: true
          description: CUST_MK_SK key blob.
            CUST_MK_SK is stored in form of RFC3394 blob and it is used by bootloader to decrypt SB3.1 encryption key during processing of SB file by bootloader.
            CUST_MK_SK is generated during device provisioning process by HSM_KEY_GEN (random key) or by HSM_STORE_KEY (user defined key) commands.
            To store this key into CMPA, SB_STORE_KEY command should be used.
          sub_regs:
            - field160
            - field164
            - field168
            - field16C
            - field170
            - field174
            - field178
            - field17C
            - field180
            - field184
            - field188
            - field18C
        - uid: cmpa_pqc_rotkh
          name: PQC_ROTKH
          width: 384
          reversed: true
          config_as_hexstring: true
          description:
            PQC_ROTKH field is compounded by 12 32-bit fields and contains Root key table hash.
            Root of Trust Key Hash is SHA256 or SHA384 of RoTK public. Same RoTKs and RoTKTH values are shared between debug authentication, SB4 firmware updates
            container and signed boot image based on CMPA.RoTKx_Usage.
          sub_regs:
            - field190
            - field194
            - field198
            - field19C
            - field1A0
            - field1A4
            - field1A8
            - field1AC
            - field1B0
            - field1B4
            - field1B8
            - field1BC
      computed_fields:
        field040: # DCFG_CC_SOCU_PIN
          field040-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE
        field044: # DCFG_CC_SOCU_DFLT
          field044-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE

    cfpa:
      address: 0x100_0000
      reg_spec: pfr_cfpa.json
      reg_spec_modification:
        field0E0: # CFPA IMG0 CMAC
          reverse: True
          config_as_hexstring: True
        field0F0: # CFPA IMG1 CMAC
          reverse: True
          config_as_hexstring: True
        field1F0: # CFPA CMAC
          reverse: True
          config_as_hexstring: True
      computed_fields:
        field000: # HEADER
          field000-bits8-15: pfr_reg_inverse_lower_8_bits # INV_CFPA_LC_STATE
        field020: # DBG_REVOKE_VU
          field020-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE
        field024: # DCFG_CC_SOCU_NS_PIN
          field024-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE
        field028: # DCFG_CC_SOCU_NS_DFLT
          field028-bits16-31: pfr_reg_inverse_high_half # INVERSE_VALUE
