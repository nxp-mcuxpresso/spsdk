# Copyright 2021-2025 NXP
#
# SPDX-License-Identifier: BSD-3-Clause

sb3_output:
  type: object
  title: Basic Settings
  properties:
    containerOutputFile:
      type: string
      title: SB3 filename
      description: Generated SB3 container filename.
      template_value: my_new.sb3
  required: [containerOutputFile]

sb3_description:
  type: object
  title: Secure Binary v3.1 Settings
  properties:
    description:
      type: string
      title: Description
      description: Description up to 16 characters, longer will be truncated. Stored in SB3.1 manifest.
      template_value: My SB file
sb3:
  type: object
  title: Secure Binary v3.1 Settings
  properties:
    containerKeyBlobEncryptionKey:
      type: string
      title: Part Common Key
      description: Path to PCK/NPK 256 or 128 bit key in plain hex string format or path to binary file or hex string.
      template_value: my_pck.txt
      format: file-or-hex-value
    isNxpContainer:
      type: boolean
      title: Enable NXP Container format
      description: Internal usage only, used for generating SB files with NXP content e.g. provisioning firmware, etc...
      template_value: false
    kdkAccessRights:
      type: number
      title: KDK access rights
      description: Accepted values are 0, 1, 2 and 3. Value used as key properties for key derivation process, more details can be found in CSSv2 manual.
      enum: [0, 1, 2, 3]
      template_value: 0
    containerConfigurationWord:
      type: [string, number]
      title: Container configuration word
      description: Flag value in SB3.1 manifest, not used by silicons with LPC55S3x ROM. Value can be kept 0, or it can be removed from the configuration file.
      format: number
      template_value: 0x0
  allOf:
    - if:
        properties:
          isEncrypted:
            enum: [true, null]
      then:
        required: [containerKeyBlobEncryptionKey]
      else:
        required: []

sb3_test:
  type: object
  title: Secure Binary v3.1 Testing Settings
  skip_in_template: true
  properties:
    isEncrypted:
      type: boolean
      title: Enable NXP Container encryption
      description: If false, generated SB3.1 blocks are not encrypted, only for testing, ROM won't accept unencrypted SB3.1 file. If option is missing, SB3.1 file is automatically encrypted.
      template_value: true
      skip_in_template: true
    timestamp:
      type: [string, number]
      title: SB3 file force timestamp
      description: For testing purposes. This option can override real timestamp of SB3 file.
      format: number
      template_value: 1234567890
      skip_in_template: true

sb3_commands:
  type: object
  title: Secure Binary v3.1 / v4.0 Commands Settings
  required: [commands]
  properties:
    commands:
      type: array
      title: SB3.1 Commands
      description: Secure Binary v3.1 commands block, list of all possible options - Modify it according to your application
      items:
        oneOf:
          - type: object
            required: [erase]
            properties:
              erase:
                type: object
                title: Erase
                description: Performs a flash erase of the given address range. The erase will be rounded up to the sector size.
                properties:
                  address:
                    type: [string, number]
                    title: Address
                    description: Address of memory block to be erased.
                    format: number
                    template_value: 0x0
                  size:
                    type: [string, number]
                    title: Size
                    description: Size of memory block to be erased.
                    format: number
                    template_value: 4096
                  memoryId:
                    type: [string, number]
                    title: Memory ID
                    description: ID of memory block to be erased.
                    format: number
                    template_value: 0
                required: [address, size]

          - type: object
            required: [load]
            properties:
              load:
                type: object
                title: Load
                description: If set, then the data to write immediately follows the range header. The length field contains the actual data length
                properties:
                  address:
                    type: [string, number]
                    title: Address
                    description: Address of memory block to be loaded.
                    format: number
                    template_value: 0x0
                  memoryId:
                    type: [string, number]
                    title: Memory ID
                    description: ID of memory block to be loaded.
                    format: number
                    template_value: 0
                  file:
                    type: string
                    title: Binary file.
                    format: file
                    skip_in_template: True
                  values:
                    type: [string, number, array]
                    title: 32-bit binary values delimited by comma to be programmed or a list with multiple values as integers or 32-bit binary values.
                    skip_in_template: True
                  value:
                    type: [string, number]
                    title: Binary value
                    skip_in_template: True
                  data:
                    type: [string, number, array]
                    title: Data to be loaded
                    description: >
                      The data to be loaded, it could be defined in following formats:
                        - 32-bit value. Value will be converted to binary in little endian format. Example: '0xB38AA899' or '0b111000'
                        - Array of 32-bit binary values delimited by comma to be loaded. Individual 32-bit values will be stored in little endian format. Example: 0x1234, 0x5678, 0, 12345678
                        - List of integers passed as an array.
                        - Path to binary file. Example: my_binary.bin
                    template_value: my_binary.bin
                  compress:
                    type: boolean
                    title: Data compression
                    description: Use LZMA compression of date before loading onto the target
                    template_value: false
                  sectorSize:
                    type: [string, number]
                    title: Memory sector size
                    description: Size of memory sector where data should be loaded.
                    format: number
                    template_value: 8_192
                required: [address]
                oneOf:
                  - required: [data]
                  - required: [file]
                  - required: [value]
                  - required: [values]
                allOf:
                  - if:
                      properties:
                        compress:
                          enum: [false, no, null]
                    then:
                      required: []
                    else:
                      required: [sectorSize]
                  - if:
                      properties:
                        data:
                          type: string
                          # Check if it doesn't start with 0x or 0b and doesn't contain commas
                          not:
                            pattern: "^(0x|0b)|,|^[0-9]+$"
                      required: [data]
                    then:
                      properties:
                        data:
                          format: file
          - type: object
            required: [execute]
            properties:
              execute:
                type: object
                title: Execute
                description: Address is the jump-to address. No further processing of SB after jump, ROM do not expect to return.
                properties:
                  address:
                    type: [string, number]
                    title: Address
                    description: Jump-to address to start execute code.
                    format: number
                    template_value: 0x0
                required: [address]

          - type: object
            required: [call]
            properties:
              call:
                type: object
                title: Call
                description: Address is address to jump. However, the state machine should expect a return to the next statement to continue processing the SB file
                properties:
                  address:
                    type: [string, number]
                    title: Address
                    description: Jump-to address to start execute code.
                    format: number
                    template_value: 0x0
                required: [address]

          - type: object
            required: [programFuses]
            properties:
              programFuses:
                type: object
                title: Program Fuses
                description: Address is OTP index of fuses to be programmed (Check the reference manual for more information). Values is a comma separated list of 32bit values.
                properties:
                  address:
                    type: [string, number]
                    title: Address
                    description: OTP Index of fuses to be programmed. Depends on the chip ROM.
                    format: number
                    template_value: 0x0
                  values:
                    type: [string, number]
                    title: Binary values
                    description: 32bit binary values delimited by comma or one 32 bit integer to be programmed.
                    template_value: 0x1234, 0x5678, 0, 12345678
                required: [address, values]

          - type: object
            required: [programIFR]
            properties:
              programIFR:
                type: object
                title: Program IFR
                description: The startAddress will be the address into the IFR region, length will be in number of bytes to write to IFR region. The data to write to IFR region at the given address will immediately follow the header
                properties:
                  address:
                    type: [string, number]
                    title: Address
                    description: Address of IFR region to be programmed.
                    format: number
                    template_value: 0x0
                  file:
                    type: string
                    title: Binary file.
                    format: file
                    skip_in_template: True
                  values:
                    type: [string, number, array]
                    title: 32-bit binary values delimited by comma to be programmed or a list with multiple values as integer or 32-bit binary values.
                    skip_in_template: True
                  value:
                    type: [string, number]
                    title: Binary value
                    skip_in_template: True
                  data:
                    type: [string, number, array]
                    title: Data to be loaded
                    description: >
                      The data to be loaded, it could be defined in following formats:
                        - 32-bit value. Value will be converted to binary in little endian format. Example: '0xB38AA899' or '0b111000'
                        - Array of 32-bit binary values delimited by comma to be loaded. Individual 32-bit values will be stored in little endian format. Example: 0x1234, 0x5678, 0, 12345678
                        - List of integers passed as an array.
                        - Path to binary file. Example: my_binary.bin
                    template_value: my_binary.bin
                required: [address]

          - type: object
            required: [writeIFR]
            properties:
              writeIFR:
                type: object
                title: Write IFR
                description: The startAddress will be the address into the IFR region, length will be in number of bytes to write to IFR region. The data to write to IFR region at the given address will immediately follow the header
                properties:
                  type:
                    type: [string, number]
                    title: IFR type
                    description: IFR type to be written.
                    enum: [CFPA, CFPA_AND_CMPA]
                    template_value: CFPA
                  file:
                    type: string
                    title: Binary file.
                    format: file
                    skip_in_template: True
                  values:
                    type: [string, number, array]
                    title: 32-bit binary values delimited by comma to be programmed or a list with multiple values as integer or 32-bit binary values.
                    skip_in_template: True
                  value:
                    type: [string, number]
                    title: Binary value
                    skip_in_template: True
                  data:
                    type: [string, number, array]
                    title: Data to be loaded
                    description: >
                      The data to be loaded, it could be defined in following formats:
                        - 32-bit value. Value will be converted to binary in little endian format. Example: '0xB38AA899' or '0b111000'
                        - Array of 32-bit binary values delimited by comma to be loaded. Individual 32-bit values will be stored in little endian format. Example: 0x1234, 0x5678, 0, 12345678
                        - List of integers passed as an array.
                        - Path to binary file. Example: my_binary.bin
                    template_value: ifr_data.bin
                required: [type]

          - type: object
            required: [loadCMAC]
            properties:
              loadCMAC:
                type: object
                title: Load CMAC
                description: If set, then the data to write immediately follows the range header. The length field contains the actual data length. ROM is calculating cmac from loaded data and storing on address known by ROM decided based on startAddress.
                properties:
                  address:
                    type: [string, number]
                    title: Address
                    description: Address of memory block to be CMAC loaded.
                    format: number
                    template_value: 0x0
                  memoryId:
                    type: [string, number]
                    title: Memory ID
                    description: ID of memory block to be CMAC loaded.
                    format: number
                    template_value: 0
                  file:
                    type: string
                    title: Binary file
                    description: Binary file to be loaded.
                    format: file
                    template_value: my_cmac_binary.bin
                required: [address, file]

          - type: object
            required: [copy]
            properties:
              copy:
                type: object
                title: Copy
                description: Used for copying data from one place to another. 32 bytes fixed size.
                properties:
                  addressFrom:
                    type: [string, number]
                    title: Address From
                    description: Address of memory block to be copied.
                    format: number
                    template_value: 0x0
                  memoryIdFrom:
                    type: [string, number]
                    title: Memory ID From
                    description: ID of memory block to be copied.
                    format: number
                    template_value: 0
                  size:
                    type: [string, number]
                    title: Size
                    description: Size of memory block to be copied.
                    format: number
                    template_value: 4096
                  addressTo:
                    type: [string, number]
                    title: Address To
                    description: Address of memory where block to be copied.
                    format: number
                    template_value: 0x2000_0000
                  memoryIdTo:
                    type: [string, number]
                    title: Memory ID To
                    description: ID of memory block where to be copied.
                    format: number
                    template_value: 0
                required: [addressFrom, size, addressTo]

          - type: object
            required: [loadHashLocking]
            properties:
              loadHashLocking:
                type: object
                title: Load with HASH locking
                description: If set, then the data to write immediately follows the range header. The length field contains the actual data length. ROM is calculating hash of the data and storing the value in the last 64 bytes of the loaded data, which are reserved for it.
                properties:
                  address:
                    type: [string, number]
                    title: Address
                    description: Address of memory block to be loaded.
                    format: number
                    template_value: 0x0
                  memoryId:
                    type: [string, number]
                    title: Memory ID
                    description: ID of memory block to be loaded.
                    format: number
                    template_value: 0
                  file:
                    type: string
                    title: Binary file
                    description: Binary file to be loaded.
                    format: file
                    template_value: my_hashlocking_binary.bin
                required: [address, file]

          - type: object
            required: [loadKeyBlob]
            properties:
              loadKeyBlob:
                type: object
                title: Load Key Blob
                description: Wrapped key blob immediately follows the range key blob header. The length field contains the actual data length.
                properties:
                  offset:
                    type: [string, number]
                    title: Offset
                    description: Offset of the key blob.
                    format: number
                    template_value: 0x0
                  wrappingKeyId:
                    type: string
                    title: Wrapping key ID
                    description: Wrapping ID of key blob.
                    enum: [NXP_CUST_KEK_INT_SK, NXP_CUST_KEK_EXT_SK]
                    template_value: 0
                  file:
                    type: string
                    title: Binary file
                    description: Binary file to be loaded.
                    format: file
                    template_value: my_keyblob.bin
                  plainInput:
                    type: string
                    title: Key Blob as plain text
                    description: Indicates whether key is provided as plaintext or not. If it's in plaintext this option also indicates whether it's as binary or hex
                    enum: ["no", bin, hex]
                    template_value: "no"
                required: [offset, wrappingKeyId, file]

          - type: object
            required: [configureMemory]
            properties:
              configureMemory:
                type: object
                title: Configure memory
                description: Configure memory.
                properties:
                  configAddress:
                    type: [string, number]
                    title: Address
                    description: Configuration address.
                    format: number
                    template_value: 0x0
                  memoryId:
                    type: [string, number]
                    title: Memory ID
                    description: ID of memory block to be configured.
                    format: number
                    template_value: 0
                required: [configAddress]

          - type: object
            required: [fillMemory]
            properties:
              fillMemory:
                type: object
                title: Fill memory
                description: Used for filling of the memory range by same repeated int32 pattern.
                properties:
                  address:
                    type: [string, number]
                    title: Address
                    description: Address of memory block to be filled.
                    format: number
                    template_value: 0x0
                  size:
                    type: [string, number]
                    title: Size
                    description: Size of memory block to be filled.
                    format: number
                    template_value: 4096
                  pattern:
                    type: [string, number]
                    title: Pattern
                    description: Pattern which will be used to fill memory.
                    format: number
                    template_value: 0xA5A5A5A5
                required: [address, size, pattern]

          - type: object
            required: [checkFwVersion]
            properties:
              checkFwVersion:
                type: object
                title: Check firmware version
                description: Checks FW version value specified in command for specified counter ID. FW version value in command must be greater than value programmed in OTP to be accepted, otherwise rollback is detected and receive SB fails
                properties:
                  value:
                    type: [string, number]
                    title: Value - Firmware version
                    description: Firmware version to be compared.
                    format: number
                    template_value: 0x0000_0001
                  counterId:
                    type: string
                    title: Counter ID
                    description: ID of FW counter to be checked.
                    enum:
                      [
                        none,
                        nonsecure,
                        secure,
                        radio,
                        snt,
                        bootloader,
                        radio_ip,
                      ]
                    template_value: secure
                required: [value, counterId]

          - type: object
            required: [reset]
            properties:
              reset:
                type: object
                title: Reset
                description: Resets the target
                properties: {}
