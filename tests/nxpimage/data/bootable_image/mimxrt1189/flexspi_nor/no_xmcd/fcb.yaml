# Copyright 2023-2025 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
# FCB configuration for mimxrt1189.
# Created: 13/12/2024 17:40:44.
# NXP SPSDK version: 2.5.0.dev38+g0429c7b77
family: mimxrt1189
revision: latest
type: flexspi_nor
fcb_settings:
  tag: #  [0x000-0x003] Tag, fixed value 0x42464346UL
    value: "0x42464346" # The value width: 32b
  version: #  [0x004-0x007] Version,[31:24] -'V', [23:16] - Major, [15:8] - Minor, [7:0] - bugfix
    bitfields: # The register bitfields
      bugfix: "0x00" # Offset: 0b, Width: 8b, Description: [07:00] Bugfix - 0
      minor: "0x04" # Offset: 8b, Width: 8b, Description: [15:08] Minor
      major: "0x01" # Offset: 16b, Width: 8b, Description: [23:16] Major - 1
  readSampleClkSrc: #  [0x00c-0x00c] Read Sample Clock Source, valid value: 0/1/3
    value: "0x01" # The value width: 8b
  csHoldTime: #  [0x00d-0x00d] CS hold time, default value: 3
    value: "0x03" # The value width: 8b
  csSetupTime: #  [0x00e-0x00e] CS setup time, default value: 3
    value: "0x03" # The value width: 8b
  columnAddressWidth: #  [0x00f-0x00f] Column Address with, for HyperBus protocol, it is fixed to 3, For Serial NAND, need to refer to datasheet
    value: "0x00" # The value width: 8b
  deviceModeCfgEnable: #  [0x010-0x010] Device Mode Configure enable flag, 1 - Enable, 0 - Disable
    value: "0x00" # The value width: 8b
  deviceModeType: #  [0x011-0x011] Specify the configuration command type: 0 - Generic, 1 - Quad Enable, 2 - SPI-to-xSPI, 3 - xSPI-to-SPI
    value: "0x00" # The value width: 8b
  waitTimeCfgCommands: #  [0x012-0x013] Wait time for all configuration commands, unit: 100us, Used for DPI/QPI/OPI switch or reset command
    value: "0x0000" # The value width: 16b
  deviceModeSeq: #  [0x014-0x017] Device mode sequence info, [7:0] - LUT sequence id, [15:8] - LUt sequence number, [31:16] Reserved
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  deviceModeArg: #  [0x018-0x01b] Argument/Parameter for device configuration. effective only when deviceModeCfgEnable = 1
    value: "0x00000000" # The value width: 32b
  configCmdEnable: #  [0x01c-0x01c] Configure command Enable Flag, 1 - Enable, 0 - Disable
    value: "0x00" # The value width: 8b
  configCmdSeqs_0: #  [0x020-0x02b] Sequence info for Device Configuration command, similar as deviceModeSeq
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  configCmdSeqs_1: #  [0x020-0x02b] Sequence info for Device Configuration command, similar as deviceModeSeq
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  configCmdSeqs_2: #  [0x020-0x02b] Sequence info for Device Configuration command, similar as deviceModeSeq
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  configCmdArgs_0: #  [0x030-0x03b] Arguments/Parameters for device Configuration commands
    value: "0x00000000" # The value width: 32b
  configCmdArgs_1: #  [0x030-0x03b] Arguments/Parameters for device Configuration commands
    value: "0x00000000" # The value width: 32b
  configCmdArgs_2: #  [0x030-0x03b] Arguments/Parameters for device Configuration commands
    value: "0x00000000" # The value width: 32b
  controllerMiscOption: #  [0x040-0x043] Controller Misc Options, see Misc feature bit definitions for more details
    value: "0x00000010" # The value width: 32b
  deviceType: #  [0x044-0x044] Device Type:  See Flash Type Definition for more details
    value: "0x01" # The value width: 8b
  sflashPadType: #  [0x045-0x045] Serial Flash Pad Type: 1 - Single, 2 - Dual, 4 - Quad, 8 - Octal
    value: "0x04" # The value width: 8b
  serialClkFreq: #  [0x046-0x046] Serial Flash Frequency, device specific definitions, See System Boot Chapter for more details
    value: "0x02" # The value width: 8b
  lutCustomSeqEnable: #  [0x047-0x047] LUT customization Enable, it is required if the program/erase cannot be done using 1 LUT sequence, currently, only applicable to HyperFLASH
    value: "0x00" # The value width: 8b
  sflashA1Size: #  [0x050-0x053] Size of Flash connected to A1
    value: "0x01000000" # The value width: 32b
  sflashA2Size: #  [0x054-0x057] Size of Flash connected to A2
    value: "0x00000000" # The value width: 32b
  sflashB1Size: #  [0x058-0x05b] Size of Flash connected to B1
    value: "0x00000000" # The value width: 32b
  sflashB2Size: #  [0x05c-0x05f] Size of Flash connected to B2
    value: "0x00000000" # The value width: 32b
  csPadSettingOverrideEn: #  [0x060-0x060] Set to 0 if it is not supported
    value: "0x00" # The value width: 8b
  csPadSettingOverride: #  [0x061-0x061] Overriding pad setting of CS
    value: "0x00" # The value width: 8b
  sclkPadSettingOverrideEn: #  [0x064-0x064] Set to 0 if it is not supported
    value: "0x00" # The value width: 8b
  sclkPadSettingOverride: #  [0x065-0x065] Overriding pad setting of SCLK
    value: "0x00" # The value width: 8b
  dataPadSettingOverrideEn: #  [0x068-0x068] Set to 0 if it is not supported
    value: "0x00" # The value width: 8b
  dataPadSettingOverride: #  [0x069-0x069] Overriding pad setting of data signals
    value: "0x00" # The value width: 8b
  dqsPadSettingOverrideEn: #  [0x06c-0x06c] Set to 0 if it is not supported
    value: "0x00" # The value width: 8b
  dqsPadSettingOverride: #  [0x06d-0x06d] Overriding pad setting of DQS
    value: "0x00" # The value width: 8b
  timeoutInMs: #  [0x070-0x073] Timeout threshold for read status command
    value: "0x00000000" # The value width: 32b
  commandInterval: #  [0x074-0x077] CS deselect interval between two commands
    value: "0x00000000" # The value width: 32b
  dataValidTime: #  [0x078-0x07b] CLK edge to data valid time for PORT A and PORT B, in terms of 0.1ns
    bitfields: # The register bitfields
      dllAValidTime: "0x0000" # Offset: 0b, Width: 16b, Description:  Data valid time for DLLA in terms of 0.1 ns
      dllBValidTime: "0x0000" # Offset: 16b, Width: 16b, Description:  Data valid time for DLLB in terms of 0.1 ns
  busyOffset: #  [0x07c-0x07d] Busy offset, valid value: 0-31
    value: "0x0000" # The value width: 16b
  busyBitPolarity: #  [0x07e-0x07f] Busy flag polarity, 0 - busy flag is 1 when flash device is busy, 1 - busy flag is 0 when flash device is busy
    value: "0x0000" # The value width: 16b
  # -----------------------------------===== lookupTable_seq0_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000080, Width: 16b; Lookup table holds Flash command sequences 0, instruction 0
  lookupTable_seq0_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0xEE'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 8PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_DDR
  # -----------------------------------===== lookupTable_seq0_instr1 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000082, Width: 16b; Lookup table holds Flash command sequences 0, instruction 1
  lookupTable_seq0_instr1:
    OPERAND: '0x11'
    NUM_PADS: 8PAD
    OPERATION_CODE: CMD_DDR
  lookupTable_seq0_instr2:
    OPERAND: '0x20'
    NUM_PADS: 8PAD
    OPERATION_CODE: RADDR_DDR
  lookupTable_seq0_instr3:
    OPERAND: '0x04'
    NUM_PADS: 8PAD
    OPERATION_CODE: DUMMY_DDR
  lookupTable_seq0_instr4:
    OPERAND: '0x04'
    NUM_PADS: 8PAD
    OPERATION_CODE: READ_DDR
  lookupTable_seq0_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq0_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq0_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # -----------------------------------===== lookupTable_seq1_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000090, Width: 16b; Lookup table holds Flash command sequences 1, instruction 0
  lookupTable_seq1_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x05'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 1PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_SDR
  lookupTable_seq1_instr1:
    OPERAND: '0x04'
    NUM_PADS: 1PAD
    OPERATION_CODE: READ_SDR
  lookupTable_seq1_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq1_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq1_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq1_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq1_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq1_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # -----------------------------------===== lookupTable_seq2_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x000000A0, Width: 16b; Lookup table holds Flash command sequences 2, instruction 0
  lookupTable_seq2_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x05'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 8PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_DDR
  lookupTable_seq2_instr1:
    OPERAND: '0xFA'
    NUM_PADS: 8PAD
    OPERATION_CODE: CMD_DDR
  lookupTable_seq2_instr2:
    OPERAND: '0x20'
    NUM_PADS: 8PAD
    OPERATION_CODE: RADDR_DDR
  lookupTable_seq2_instr3:
    OPERAND: '0x04'
    NUM_PADS: 8PAD
    OPERATION_CODE: DUMMY_DDR
  lookupTable_seq2_instr4:
    OPERAND: '0x04'
    NUM_PADS: 8PAD
    OPERATION_CODE: READ_DDR
  lookupTable_seq2_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq2_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq2_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # -----------------------------------===== lookupTable_seq3_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x000000B0, Width: 16b; Lookup table holds Flash command sequences 3, instruction 0
  lookupTable_seq3_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x06'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 1PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_SDR
  lookupTable_seq3_instr1:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq3_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq3_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq3_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq3_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq3_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq3_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # -----------------------------------===== lookupTable_seq4_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x000000C0, Width: 16b; Lookup table holds Flash command sequences 4, instruction 0
  lookupTable_seq4_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x06'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 8PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_DDR
  lookupTable_seq4_instr1:
    OPERAND: '0xF9'
    NUM_PADS: 8PAD
    OPERATION_CODE: CMD_DDR
  lookupTable_seq4_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq4_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq4_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq4_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq4_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq4_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # -----------------------------------===== lookupTable_seq5_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x000000D0, Width: 16b; Lookup table holds Flash command sequences 5, instruction 0
  lookupTable_seq5_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x21'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 8PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_DDR
  lookupTable_seq5_instr1:
    OPERAND: '0xDE'
    NUM_PADS: 8PAD
    OPERATION_CODE: CMD_DDR
  lookupTable_seq5_instr2:
    OPERAND: '0x20'
    NUM_PADS: 8PAD
    OPERATION_CODE: RADDR_DDR
  lookupTable_seq5_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq5_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq5_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq5_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq5_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # -----------------------------------===== lookupTable_seq6_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x000000E0, Width: 16b; Lookup table holds Flash command sequences 6, instruction 0
  lookupTable_seq6_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x72'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 1PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_SDR
  lookupTable_seq6_instr1:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: CMD_SDR
  lookupTable_seq6_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: CMD_SDR
  lookupTable_seq6_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: CMD_SDR
  lookupTable_seq6_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: CMD_SDR
  lookupTable_seq6_instr5:
    OPERAND: '0x01'
    NUM_PADS: 1PAD
    OPERATION_CODE: WRITE_SDR
  lookupTable_seq6_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq6_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # -----------------------------------===== lookupTable_seq7_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x000000F0, Width: 16b; Lookup table holds Flash command sequences 7, instruction 0
  lookupTable_seq7_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x00'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 1PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: STOP
  lookupTable_seq7_instr1:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq7_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq7_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq7_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq7_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq7_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq7_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # -----------------------------------===== lookupTable_seq8_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000100, Width: 16b; Lookup table holds Flash command sequences 8, instruction 0
  lookupTable_seq8_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0xDC'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 8PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_DDR
  lookupTable_seq8_instr1:
    OPERAND: '0x23'
    NUM_PADS: 8PAD
    OPERATION_CODE: CMD_DDR
  lookupTable_seq8_instr2:
    OPERAND: '0x20'
    NUM_PADS: 8PAD
    OPERATION_CODE: RADDR_DDR
  lookupTable_seq8_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq8_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq8_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq8_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq8_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # -----------------------------------===== lookupTable_seq9_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000110, Width: 16b; Lookup table holds Flash command sequences 9, instruction 0
  lookupTable_seq9_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x12'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 8PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_DDR
  lookupTable_seq9_instr1:
    OPERAND: '0xED'
    NUM_PADS: 8PAD
    OPERATION_CODE: CMD_DDR
  lookupTable_seq9_instr2:
    OPERAND: '0x20'
    NUM_PADS: 8PAD
    OPERATION_CODE: RADDR_DDR
  lookupTable_seq9_instr3:
    OPERAND: '0x04'
    NUM_PADS: 8PAD
    OPERATION_CODE: WRITE_DDR
  lookupTable_seq9_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq9_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq9_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq9_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # ----------------------------------===== lookupTable_seq10_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000120, Width: 16b; Lookup table holds Flash command sequences 10, instruction 0
  lookupTable_seq10_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x00'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 1PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: STOP
  lookupTable_seq10_instr1:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq10_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq10_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq10_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq10_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq10_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq10_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # ----------------------------------===== lookupTable_seq11_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000130, Width: 16b; Lookup table holds Flash command sequences 11, instruction 0
  lookupTable_seq11_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x60'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 8PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: CMD_DDR
  lookupTable_seq11_instr1:
    OPERAND: '0x9F'
    NUM_PADS: 8PAD
    OPERATION_CODE: CMD_DDR
  lookupTable_seq11_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq11_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq11_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq11_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq11_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq11_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # ----------------------------------===== lookupTable_seq12_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000140, Width: 16b; Lookup table holds Flash command sequences 12, instruction 0
  lookupTable_seq12_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x00'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 1PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: STOP
  lookupTable_seq12_instr1:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq12_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq12_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq12_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq12_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq12_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq12_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # ----------------------------------===== lookupTable_seq13_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000150, Width: 16b; Lookup table holds Flash command sequences 13, instruction 0
  lookupTable_seq13_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x00'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 1PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: STOP
  lookupTable_seq13_instr1:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq13_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq13_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq13_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq13_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq13_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq13_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # ----------------------------------===== lookupTable_seq14_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000160, Width: 16b; Lookup table holds Flash command sequences 14, instruction 0
  lookupTable_seq14_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x00'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 1PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: STOP
  lookupTable_seq14_instr1:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq14_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq14_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq14_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq14_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq14_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq14_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # ----------------------------------===== lookupTable_seq15_instr0 [Optional] =====-----------------------------------
  # Description: Offset: 0x00000170, Width: 16b; Lookup table holds Flash command sequences 15, instruction 0
  lookupTable_seq15_instr0:
    # ------------------------------------------===== OPERAND [Optional] =====------------------------------------------
    # Description: Offset: 0b, Width: 8b, Instruction operand. Its values depends on used instruction
    OPERAND: '0x00'
    # -----------------------------------------===== NUM_PADS [Optional] =====------------------------------------------
    # Description: Offset: 8b, Width: 2b, Number of pads used by instruction. Some instructions ignores this parameter.
    # - 1PAD, (0): Single mode. One pad is used.
    # - 2PAD, (1): Dual mode. Two pads are used.
    # - 4PAD, (2): Quad mode. Four pads are used.
    # - 8PAD, (3): Octal mode. Eight pads are used.
    # Possible options: <1PAD, 2PAD, 4PAD, 8PAD>
    NUM_PADS: 1PAD
    # --------------------------------------===== OPERATION_CODE [Optional] =====---------------------------------------
    # Description: Offset: 10b, Width: 6b, Instruction operation code.
    # - STOP, (0): Stop execution and de-assert CS. Then, the next command sequence (to the same flash device) starts
    # from instruction pointer 0.
    # - CMD_SDR, (1): Transmit command code to Flash.
    # - RADDR_SDR, (2): Transmit row address to Flash.
    # - CADDR_SDR, (3): Transmit column address to Flash.
    # - MODE1_SDR, (4): Transmit mode bits to Flash.
    # - MODE2_SDR, (5): Transmit mode bits to Flash.
    # - MODE4_SDR, (6): Transmit mode bits to Flash.
    # - MODE8_SDR, (7): Transmit mode bits to Flash.
    # - WRITE_SDR, (8): Transmit program data to Flash device.
    # - READ_SDR, (9): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_SDR, (10): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_SDR, (11): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_SDR, (12): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_SDR, (13): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # - JMP_ON_CS, (31): Stop execution, de-assert CS and save operand[7:0] as the instruction start pointer for next
    # sequence.Normally this instruction is used to support Execute-In-Place enhanced mode. See XIP enhanced mode for
    # more details.This instruction is only allowed for AHB read commands. There is interrupt status bit set
    # (INTR[IPCMDERR] or INTR[AHBCMDERR]) when using this instruction in IP command or AHB write command.
    # - CMD_DDR, (33): Transmit command code to Flash.
    # - RADDR_DDR, (34): Transmit row address to Flash.
    # - CADDR_DDR, (35): Transmit column address to Flash.
    # - MODE1_DDR, (36): Transmit mode bits to Flash.
    # - MODE2_DDR, (37): Transmit mode bits to Flash.
    # - MODE4_DDR, (38): Transmit mode bits to Flash.
    # - MODE8_DDR, (39): Transmit mode bits to Flash.
    # - WRITE_DDR, (40): Transmit program data to Flash device.
    # - READ_DDR, (41): Receive read data from Flash device. Read data is put into AHB_RX_BUF or IP_RX_FIFO.
    # - LEARN_DDR, (42): Receive read data or Preamble bit from Flash deviceThe FlexSPI controller will compare the data
    # line bits with DLPR register to determine a correct sampling clock phase.
    # - DATSZ_DDR, (43): Transmit read or program data size (byte number) to Flash device.
    # - DUMMY_DDR, (44): Leave data lines undriven by the FlexSPI controller. Turnaround cycles are provided from host
    # driving to device driving. num_pads determines the number of pads in input mode.
    # - DUMMY_RWDS_DDR, (45): This instruction is similar to DUMMY_SDR/DUMMY_DDR instruction. The difference lies in the
    # dummy cycle number.DQS pin is called RWDS in HyperBus specification. See Dummy instruction for more details.Set
    # operand as 'Latency count' for HyperBus devices.
    # Possible options: <STOP, CMD_SDR, RADDR_SDR, CADDR_SDR, MODE1_SDR, MODE2_SDR, MODE4_SDR, MODE8_SDR, WRITE_SDR,
    # READ_SDR, LEARN_SDR, DATSZ_SDR, DUMMY_SDR, DUMMY_RWDS_SDR, JMP_ON_CS, CMD_DDR, RADDR_DDR, CADDR_DDR, MODE1_DDR,
    # MODE2_DDR, MODE4_DDR, MODE8_DDR, WRITE_DDR, READ_DDR, LEARN_DDR, DATSZ_DDR, DUMMY_DDR, DUMMY_RWDS_DDR>
    OPERATION_CODE: STOP
  lookupTable_seq15_instr1:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq15_instr2:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq15_instr3:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq15_instr4:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq15_instr5:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq15_instr6:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  lookupTable_seq15_instr7:
    OPERAND: '0x00'
    NUM_PADS: 1PAD
    OPERATION_CODE: STOP
  # ---------------------------------------===== lutCustomSeq_0 [Optional] =====----------------------------------------
  lutCustomSeq_0: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_1 [Optional] =====----------------------------------------
  lutCustomSeq_1: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_2 [Optional] =====----------------------------------------
  lutCustomSeq_2: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_3 [Optional] =====----------------------------------------
  lutCustomSeq_3: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_4 [Optional] =====----------------------------------------
  lutCustomSeq_4: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_5 [Optional] =====----------------------------------------
  lutCustomSeq_5: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_6 [Optional] =====----------------------------------------
  lutCustomSeq_6: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_7 [Optional] =====----------------------------------------
  lutCustomSeq_7: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_8 [Optional] =====----------------------------------------
  lutCustomSeq_8: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_9 [Optional] =====----------------------------------------
  lutCustomSeq_9: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_10 [Optional] =====---------------------------------------
  lutCustomSeq_10: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  # ---------------------------------------===== lutCustomSeq_11 [Optional] =====---------------------------------------
  lutCustomSeq_11: #  [0x180-0x1af] Customizable LUT Sequences
    bitfields: # The register bitfields
      seqNum: "0x00" # Offset: 0b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      seqId: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Index, valid number: 0-15
  pageSize: #  Page size of Serial NOR
    value: "0x00000100" # The value width: 32b
  sectorSize: #  Sector size of Serial NOR
    value: "0x00001000" # The value width: 32b
  ipcmdSerialClkFreq: #  Clock frequency for IP command
    value: "0x01" # The value width: 8b
  isUniformBlockSize: #  Sector/Block size is the same
    value: "0x00" # The value width: 8b
  isDataOrderSwapped: #  The data order is swapped in OPI DDR mode
    value: "0x00" # The value width: 8b
  blockSize: #  Block size
    value: "0x00010000" # The value width: 32b
  flashStateCtx: #  Flash State Context after being configured
    bitfields: # The register bitfields
      flashPorMode: "0x00" # Offset: 0b, Width: 8b, Description:  Flash POR Mode
      flashCurrentMode: "0x00" # Offset: 8b, Width: 8b, Description:  Sequence Number, valid number: 1-16
      flashRestoringSequence: "0x00" # Offset: 24b, Width: 8b, Description:  Sequence Number, valid number: 1-16
