# Copyright 2025 NXP
#
# SPDX-License-Identifier: BSD-3-Clause

# ==========================  Advanced High-Assurance Boot Configuration template for mx95.  ===========================

# ======================================================================================================================
#                                                 == General Options ==
# ======================================================================================================================
# ------------------------------------------===== MCU family [Required] =====-------------------------------------------
# Description: Family identifier including the chip revision. If revision is not present, latest revision is used as
# default.
# Possible options: <mx8mn, mx8mp, mx8ulp, mx91, mx93, mx95, mimxrt1189>
family: mx95
# -----------------------------------------===== MCU revision [Optional] =====------------------------------------------
# Description: Revision of silicon
revision: b0
# -----------------------------------------===== Target memory [Optional] =====-----------------------------------------
# Description: Target memory for AHAB container
# Possible options: <serial_downloader, standard, nand_2k, nand_4k>
target_memory: standard
# ---------------------------------------===== Output file name [Required] =====----------------------------------------
# Description: Output AHAB file name
output: pqc_ahab.bin
# ------------------------------===== List of containers present in AHAB [Required] =====-------------------------------
# Description: The order of containers in the list defines the order in AHAB.
containers:
  - # --------------------------------------===== AHAB Container [Required] =====---------------------------------------
    # Description: Configurable Container format to add to AHAB image. This allow to configure all aspects of the AHAB
    # container.
    container:
      # --------------------------------===== Super Root Key (SRK) set [Required] =====---------------------------------
      # Description: Defines which set is used to authenticate the container.
      # Possible options: <none, oem, nxp>
      srk_set: oem
      # ---------------------------------===== Used SRK [Conditionally required] =====----------------------------------
      # Description: Which key from SRK set is being used.
      used_srk_id: 2
      # -------------------------------------===== SRK revoke mask [Optional] =====-------------------------------------
      # Description: Bit-mask to indicate which SRKs to revoke. Bit set to 1 means revoke key. Bit 0 = revoke SRK_0, bit
      # 1 = revoke SRK_1 etc. Example of revocation SRK_0 and SRK_1 - the value should be 0x03
      srk_revoke_mask: "0x01"
      # --------------------------------------===== Fuse version [Optional] =====---------------------------------------
      # Description: The value must be equal or greater than the version stored in fuses to allow loading this
      # container.
      fuse_version: 2
      # ------------------------------------===== Software version [Optional] =====-------------------------------------
      # Description: Number used by Privileged Host Boot Companion (PHBC) to select between multiple images with same
      # Fuse version field.
      sw_version: 4
      # -------------------------------===== AHAB container signing key [Optional] =====--------------------------------
      # Description: Private key used for sign the container header. Header can be signed by SRK. The referenced SRK
      # must not have been revoked.
      signer: ../../_data/keys/ecc256/srk2_ecc256.pem
      # ---------------===== AHAB container signing key for second signature (PQC only) [Optional] =====----------------
      # Description: Private key used for second sign (PQC only) of the container header. Header can be signed by SRK.
      # The referenced SRK must not have been revoked.
      signer_#2: ../../_data/keys/dil3/srk2_dil3.pem

      # ================================================================================================================
      #                     == Configuration of AHAB Container images (array of multiple images) ==
      # ================================================================================================================
      # ---------------------------------------===== Image array [Required] =====---------------------------------------
      # Description: Array of image entries.
      images:
        - image_path: ahab/fuses_scripts/dummy_data.bin # [Required], Image path; Path to image binary (absolute/relative).
          image_offset: 0 # [Required], Image offset in AHAB container; Relative address for start of AHAB image (can contain multiple AHAB containers). In case of XiP type of AHAB image, the load_address and entry_point must correspond to this values. Example of setting of load_address - AHAB_IMAGE_ADDRESS+IMAGE_OFFSET=LOAD_ADDRESS
          load_address: 2 # [Required], Image destination address; Address the image is written to in memory (absolute address in system memory).
          entry_point: 1 # [Required], Image entry point (absolute address). Valid only for executable image types.
          image_type: executable # [Required], Image type; Kind of image; Possible options:['executable', 'data', 'dcd_image', 'seco', 'provisioning_image', 'provisioning_data']
          core_id: cortex-a55 # [Required], Core ID; Defines the core the image is dedicated for; Possible options:['cortex-a55', 'cortex-m33', 'cortex-m7']
          hash_type: sha512 # [Optional], Images HASH type; HASH type of image. All images in the container must have the same HASH type; Possible options:['sha256', 'sha384', 'sha512']

      # ================================================================================================================
      #                                      == Configuration of AHAB SRK table ==
      # ================================================================================================================
      # ---------------------------------===== SRK Table [Conditionally required] =====---------------------------------
      # Description: SRK (Super Root key) table definition.
      srk_table:
        # ----------------------------------------===== CA Flag [Optional] =====----------------------------------------
        # Description: CA Flag is used by HAB to indicate if the SRK is allowed to sign other keys
        flag_ca: false
        # ------------------------------===== Super Root Key (SRK) table [Required] =====-------------------------------
        # Description: Table containing the used SRK records. All SRKs must be of the same type. Supported signing
        # algorithms are: RSA-PSS, ECDSA, Dilithium or SM2. Supported hash algorithms: sha256, sha384, sha512, sha3_256,
        # sha3_384, sha3_512, sm3. Supported key sizes/curves: prime256v1, sec384r1, sec512r1, rsa2048, rsa4096,
        # dilithium3, sm2. Certificate may be of Certificate Authority. Dilithium algorithms are supported just in new
        # type of AHAB container
        srk_array:
          - ../../_data/keys/ecc256/srk0_ecc256.pub
          - ../../_data/keys/ecc256/srk1_ecc256.pub
          - ../../_data/keys/ecc256/srk2_ecc256.pub
          - ../../_data/keys/ecc256/srk3_ecc256.pub

        # ==============================================================================================================
        #               == Configuration of AHAB SRK table in case that the double signing (ECC + PQC) ==
        # ==============================================================================================================
        # -----------------------------------===== Second SRK Table [Optional] =====------------------------------------
        srk_table_#2:
          # ---------------------------------------===== CA Flag [Optional] =====---------------------------------------
          # Description: CA Flag is used by HAB to indicate if the SRK is allowed to sign other keys
          flag_ca: false
          # -----------------------------===== Super Root Key (SRK) table [Required] =====------------------------------
          # Description: Table containing the used SRK Dilithium records. All SRKs must be of the same type. Supported
          # signing algorithms are: Dilithium level 3. Supported hash algorithms: sha3_256, sha3_384, sha3_512.
          # Certificate may be of Certificate Authority.
          srk_array:
            - ../../_data/keys/dil3/srk0_dil3.pub
            - ../../_data/keys/dil3/srk1_dil3.pub
            - ../../_data/keys/dil3/srk2_dil3.pub
            - ../../_data/keys/dil3/srk3_dil3.pub
