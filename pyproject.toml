[project]
name = "spsdk"
dynamic = ["dependencies", "version"]
description = "Open Source Secure Provisioning SDK for NXP MCU/MPU"
readme = "README.md"
authors = [{ name = "NXP", email = "michal.starecek@nxp.com" }]
license = { text = "BSD-3-Clause" }
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS :: MacOS X",
    "License :: OSI Approved :: BSD License",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Embedded Systems",
    "Topic :: System :: Hardware",
    "Topic :: Utilities",
]

[tool.setuptools]
packages = ["spsdk"]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[project.urls]
"Code" = "https://github.com/NXPmicro/spsdk"
"Issue tracker" = "https://github.com/NXPmicro/spsdk/issues"
"Documentation" = "https://spsdk.readthedocs.io"

[project.optional-dependencies]
examples = ["flask", "requests", "ipython", "notebook", "ipywidgets"]
dk6 = ["pyftdi", "pylibftdi", "ftd2xx"]
oscca = ["gmssl>=3.2,<4"]
can = ["python-can<4.5,>=4.4"]
jlink = ["spsdk-jlink<1,>=0.3.1"]
lauterbach = ["spsdk-lauterbach<1,>=0.4.0"]
pemicro = ["spsdk-pemicro<1,>=0.3.1"]
# disabled until the support of Python 3.12 is fixed (https://github.com/pyauth/python-pkcs11/issues/165)
# pkcs11 = ["spsdk-pkcs11<1,>=0.3.1"]
pqc = ["spsdk-pqc<1.0,>=0.6.1"]
all = [
    "spsdk[examples]",
    "spsdk[dk6]",
    "spsdk[oscca]",
    "spsdk[can]",
    "spsdk[jlink]",
    "spsdk[lauterbach]",
    "spsdk[pemicro]",
    "spsdk[pqc]",
]

[project.scripts]
pfr = "spsdk.apps.pfr:safe_main"
blhost = "spsdk.apps.blhost:safe_main"
sdphost = "spsdk.apps.sdphost:safe_main"
sdpshost = "spsdk.apps.sdpshost:safe_main"
spsdk = "spsdk.apps.spsdk_apps:safe_main"
nxpdebugmbox = "spsdk.apps.nxpdebugmbox:safe_main"
nxpcrypto = "spsdk.apps.nxpcrypto:safe_main"
nxpdevscan = "spsdk.apps.nxpdevscan:safe_main"
nxpdevhsm = "spsdk.apps.nxpdevhsm:safe_main"
nxpele = "spsdk.apps.nxpele:safe_main"
nxpdice = "spsdk.apps.nxpdice:safe_main"
nxpimage = "spsdk.apps.nxpimage:safe_main"
nxpmemcfg = "spsdk.apps.nxpmemcfg:safe_main"
nxpuuu = "spsdk.apps.nxpuuu:safe_main"
nxpwpc = "spsdk.apps.nxpwpc:safe_main"
shadowregs = "spsdk.apps.shadowregs:safe_main"
nxpfuses = "spsdk.apps.nxpfuses:safe_main"
dk6prog = "spsdk.apps.dk6prog:safe_main"
el2go-host = "spsdk.apps.el2go:safe_main"
lpcprog = "spsdk.apps.lpcprog:safe_main"
nxpshe = "spsdk.apps.nxpshe:safe_main"

[build-system]
requires = ["setuptools_scm<8.2", "setuptools>=72.1,<74", "wheel"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
force-exclude = '''
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = false

[tool.pytest.ini_options]
junit_family = "xunit1"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError()",
    "raise SPSDKErrorImplemented()",
    "safe_main()",
    "sys.exit(main())",
]

[tool.coverage.run]
relative_files = true

[tool.pydocstyle]
convention = "google"
add_ignore = "D105,D301"
match = '(?!test_|__version__).*\.py'

[tool.bandit]
# B101: Use of assert
# B110: Try, Except, Pass detected
# B301: pickle
# B403: import pickle
# B404: import subprocess
# B603: subprocess without shell=True
skips = ["B101", "B110", "B301", "B403", "B404", "B603"]

[tool.setuptools_scm]
version_file = "spsdk/__version__.py"
version_scheme = "spsdk.versioning:run"
git_describe_command = 'git describe --tags --long --match "v[0-9].*"'

[tool.py_headers]
excluded_files = ["docs/conf.py", "spsdk/__version__.py"]

[tool.copyright]
excluded_files = [
    "docs/conf.py",
    ".pre-commit-config.yaml",
    ".readthedocs.yml",
    "spsdk/__version__.py",
    ".github/workflows/python-ci.yml",
    ".github/workflows/deploy.yml",
]


[tool.gitcov]
skip-files = ""
repo-path = "."
module = "spsdk"
coverage-report = "reports/coverage.xml"
coverage-cutoff = 0.8
parent-branch = "origin/master"
include-merges = 0
verbose = 0
debug = 0
full-file-test = 0

[tool.checker_jupiter]
[tool.checker_jupiter.exceptions]
"examples/sdp/mx815_write_file.ipynb" = [1]
"examples/imx93/imx93_ahab_uboot.ipynb" = [10]
"examples/imx93/imx93_signed_ahab_uboot.ipynb" = [10]

[tool.checker_dependencies]
root_package = "spsdk"
[tool.checker_dependencies.spdx]

"Apache-2.0" = [
    "Apache 2.0",
    "Apache-2.0 License",
    "Apache Software License 2.0",
    "Apache License, Version 2.0",
    "Apache License 2.0",
    "Apache Software License",
]
"BSD-2-Clause" = ["BSD 2-Clause License"]
"BSD-3-Clause" = [
    "BSD License",
    "BSD 3-Clause",
    "BSD (3 clause)",
    "BSD 3-Clause License",
    "Modified BSD License",
]
"MIT" = ["MIT License", "MIT license"]
"MPL-2.0" = ["MPL 2.0", "Mozilla Public License 2.0 (MPL 2.0)"]
"NLPL" = ["Public domain", "Public Domain"]
"PSF-2.0" = ["PSF", "PSFL", "Python Software Foundation License"]
"LGPL-3.0" = []
"LGPL-2.0" = ["GPL-2.0-or-later"]
"LGPL-2.1" = ["LGPL-2.1-or-later"]
"ISC" = ["ISC license"]
"Unlicense" = ["The Unlicense", "The Unlicense (Unlicense)"]

[tool.nxp_codecheck]
# Reports output directory
git_parent_branch = "origin/master"
output_directory = "reports"
default_check_paths = ["spsdk", "tools"]
jupyter_check_paths = ["examples"]

checkers = [
    { "pytest" = { timeout = 1200 } },
    { "gitcov" = { info_only = true } },
    { "pylint" = { timeout = 300 } },
    { "mypy" = { timeout = 300 } },
    "dependencies",
    { "pydocstyle" = { timeout = 200 } },
    "ruff",
    { "radon_c" = { info_only = true, timeout = 60 } },
    { "radon_d" = { timeout = 60 } },
    { "black" = { timeout = 120 } },
    { "isort" = { timeout = 60 } },
    "copyright",
    "py_headers",
    { "cyclic" = { info_only = true, check_paths = [
        "spsdk",
    ] } },
    { "cspell" = { info_only = false } },
    { "bandit" = { info_only = true } },
    { "black_nb" = { timeout = 120 } },
    "isort_nb",
    "jupyter",
]


[tool.release-tools]

[tool.release-tools.docs]
install_hook = ['uv pip install ".[all]" -r docs/requirements.txt']
docs_directory = "docs"
# Disable JIRA upload due to artifacts size
disable_jira_upload = true

[tool.release-tools.clr]
install_hook = ['uv pip install ".[all]"']
check_directories = ["spsdk", "tests", "tools", "examples"]
excluded_files = ["spsdk/__version__.py"]

[tool.release-tools.scr]
scr_file = "SW_Content_Register_SPSDK.txt"

[tool.release-tools.testpypi]
test_cmd = "spsdk --version"

[tool.release-tools.test_artifacts_collector.jenkins_jobs]
spsdk_full_test_scope_macos = { artifact_regex = ".*results.xml" }
spsdk_full_test_scope_ubuntu = { artifact_regex = ".*results.xml" }
spsdk_full_test_scope_win10 = { artifact_regex = ".*results.xml" }
spsdk_full_test_scope_win11 = { artifact_regex = ".*results.xml" }

[tool.release-tools.blackduck_sca]
project_name = "spsdk"
include_detector_types = ["pip"]
sbom_location = "SBOM-spsdk.spdx.json"
install_hook = [
    'uv pip install ".[all]"',
    'uv pip install -r requirements-develop.txt',
]

[tool.release-tools.github]
full_name = "nxp-mcuxpresso/spsdk"

[tool.check-wheel-contents]
ignore = "W002" # Wheel contains duplicate files
